"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.amqpConnect=amqpConnect;exports.channelAssertExchange=channelAssertExchange;exports.channelAssertQueue=channelAssertQueue;exports.channelBindQueue=channelBindQueue;exports.channelConsume=channelConsume;exports.channelPublish=channelPublish;exports.connectionCreateChannel=connectionCreateChannel;exports.consume=consume;exports.decode=decode;exports.encode=encode;exports.fromJson=void 0;exports.getContent=getContent;exports.getExchange=void 0;exports.getFields=getFields;exports.getPort=exports.getPassword=exports.getHostname=void 0;exports.getProperties=getProperties;exports.getVirtualHost=exports.getUsername=exports.getRoutingKey=exports.getQueue=void 0;exports.publish=publish;exports.toString=exports.toJson=exports.toBuffer=void 0;exports.transform=transform;var _debug=_interopRequireDefault(require("debug"));var _amqplib=_interopRequireDefault(require("amqplib"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('sequencemedia');const info=(0,_debug.default)('sequencemedia:rabbit-mq');log('`sequencemedia:rabbit-mq` is awake');const getUsername=({username='guest'})=>username;exports.getUsername=getUsername;const getPassword=({password='guest'})=>password;exports.getPassword=getPassword;const getHostname=({hostname='localhost'})=>hostname;exports.getHostname=getHostname;const getPort=({port=5672})=>port;exports.getPort=getPort;const getVirtualHost=({virtualHost=''})=>virtualHost;exports.getVirtualHost=getVirtualHost;const getExchange=({exchange})=>exchange;exports.getExchange=getExchange;const getQueue=({queue})=>queue;exports.getQueue=getQueue;const getRoutingKey=({routingKey})=>routingKey;exports.getRoutingKey=getRoutingKey;const toJson=value=>JSON.stringify(value);exports.toJson=toJson;const fromJson=value=>JSON.parse(value);exports.fromJson=fromJson;const toBuffer=string=>Buffer.from(string,'utf8');exports.toBuffer=toBuffer;const toString=buffer=>buffer.toString('utf8');exports.toString=toString;function getFields({fields}){info('getFields');if(fields)return fields;}function getProperties({properties}){info('getProperties');if(properties)return properties;}function getContent({content}){info('getContent');if(content)return content;}function encode(content){info('encode');return toBuffer(toJson(content));}function decode(content){info('decode');return fromJson(toString(content));}function transform(params){const username=getUsername(params);const password=getPassword(params);const hostname=getHostname(params);const port=getPort(params);const virtualHost=getVirtualHost(params);return`amqp://${username}:${password}@${hostname}:${port}/${virtualHost}`;}async function amqpConnect(params){info('amqpConnect');const connection=await _amqplib.default.connect(transform(params));return{...params,connection};}async function connectionCreateChannel({connection,...params}){info('connectionCreateChannel');const channel=await connection.createChannel();return{...params,channel};}async function channelAssertExchange({channel,...params}){info('channelAssertExchange');const{exchange}=await channel.assertExchange(getExchange(params),'topic',{durable:true});return{...params,channel,exchange};}async function channelAssertQueue({channel,...params}){info('channelAssertQueue');const{queue}=await channel.assertQueue(getQueue(params),{durable:true});return{...params,channel,queue};}async function channelBindQueue({channel,queue,exchange,...params}){info('channelBindQueue');await channel.bindQueue(queue,exchange,getRoutingKey(params));return{...params,channel,queue,exchange};}async function channelPublish({channel,exchange,...params}){info('channelPublish');return channel.publish(exchange,getRoutingKey(params),encode(getContent(params)));}async function channelConsume({channel,queue,handler,...params}){info('channelConsume');await channel.consume(queue,message=>handler({...message,content:decode(getContent(message))}),{noAck:true});return{...params,channel,queue};}function publish(params={},content={},routingKey=getRoutingKey(params)){info('publish');return amqpConnect({...params,content,routingKey}).then(connectionCreateChannel).then(channelAssertExchange).then(channelAssertQueue).then(channelPublish).catch(({message})=>{log(`Publish failed with message "${message}"`);});}function consume(params={},handler=content=>{log(content);},routingKey=getRoutingKey(params)){info('consume');return amqpConnect({...params,handler,routingKey}).then(connectionCreateChannel).then(channelAssertExchange).then(channelAssertQueue).then(channelBindQueue).then(channelConsume).catch(({message})=>{log(`Consume failed with message "${message}"`);});}